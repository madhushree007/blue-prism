{"version":3,"sources":["App.module.scss","components/pages/Pages.module.scss","components/stages/Stages.module.scss","services/config.ts","services/pages.ts","components/pages/Pages.tsx","services/hooks/usePages.ts","services/stages.ts","services/hooks/useStages.ts","components/stages/Stages.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","fetchInstance","axios","create","baseURL","process","fetchPages","a","res","data","Pages","query","useQuery","isLoading","error","onClick","refetch","className","styles","pages","map","page","to","id","name","type","published","stagesCount","pageId","params","useStages","fetchStages","Stages","useParams","history","useHistory","goBack","stages","stage","linksCount","App","container","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,UAAY,yB,mBCA9BD,EAAOC,QAAU,CAAC,MAAQ,uB,mBCA1BD,EAAOC,QAAU,CAAC,OAAS,yB,qKCQrBC,E,OAAgBC,EAAMC,OAAO,CACjCC,QAPKC,uDCcA,SAAeC,IAAtB,+B,4CAAO,8BAAAC,EAAA,sEACaN,EAAc,UAD3B,cACCO,EADD,OAECC,EAAOD,EAFR,kBAGEC,GAHF,4C,kDCbQ,SAASC,IACtB,IAAMC,ECDQC,YAAS,QAASN,GDIhC,OAAIK,EAAME,UACD,6CAILF,EAAMG,MAEN,gCACE,qDACA,wBAAQC,QAAS,kBAAMJ,EAAMK,WAA7B,wBAMJ,gCACE,8CACA,oBAAIC,UAAWC,IAAOC,MAAtB,SACGR,EAAMF,MACLE,EAAMF,KAAKA,KAAKU,MAAMC,KAAI,SAACC,GAAD,OACxB,+BACE,gCACE,eAAC,IAAD,CAAMC,GAAE,iBAAYD,EAAKE,IAAzB,UACGF,EAAKG,KADR,IACc,sCAASH,EAAKI,WAE5B,4BAAIJ,EAAKK,UAAY,YAAc,qBAErC,8BACE,eAAC,IAAD,CAAMJ,GAAE,iBAAYD,EAAKE,IAAzB,+BAAkDF,EAAKM,YAAvD,WARKN,EAAKE,Y,4CEHnB,WAA2BK,GAA3B,iBAAArB,EAAA,sEACaN,EAAc,UAAW,CAAE4B,OAAQ,CAAED,YADlD,cACCpB,EADD,OAECC,EAAOD,EAFR,kBAGEC,GAHF,4C,sBCtBA,SAASqB,EAAUF,GAExB,OADchB,YAAS,CAAC,SAAU,CAAEgB,YAAW,kBDqB1C,SAAP,kCCrBuDG,CAAYH,M,qBCIpD,SAASI,IAAU,IAE1BrB,EAAQmB,EADKG,cAAXL,QAEJM,EAAUC,cAGd,OAAIxB,EAAME,UACD,6CAILF,EAAMG,MAEN,gCACE,qDACA,wBAAQC,QAAS,kBAAMJ,EAAMK,WAA7B,wBAMJ,gCACE,wCACA,wBAAQD,QAAS,kBAAMmB,EAAQE,UAA/B,kBACA,oBAAInB,UAAWC,IAAOmB,OAAtB,SACG1B,EAAMF,MACLE,EAAMF,KAAKA,KAAK4B,OAAOjB,KAAI,SAACkB,GAAD,OACzB,+BACE,8BACE,cAAC,IAAD,CAAMhB,GAAE,iBAAYgB,EAAMV,QAA1B,SAAqCU,EAAMd,SAE7C,8BACE,eAAC,IAAD,CAAMF,GAAE,iBAAYgB,EAAMV,QAA1B,8BAAsDU,EAAMC,WAA5D,WALKD,EAAMf,YC7B3B,IAiBeiB,EAjBO,WACpB,OACE,cAAC,IAAD,UACE,sBAAMvB,UAAWC,IAAOuB,UAAxB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,iBAAZ,SACE,cAACV,EAAD,MAEF,cAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,EAArB,SACE,cAACjC,EAAD,cCDGkC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHRQ,EAAc,IAAIC,IAExBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAqBC,OAAQN,EAA7B,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.00aab946.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"Pages_pages__2p_to\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stages\":\"Stages_stages__12MY8\"};","import axios from \"axios\";\n// Put URLs .env\nexport const fetchURLs = {\n  dev: process.env.REACT_APP_BASE_URL\n};\n\nconst ENV = \"dev\";\nconst baseURL = fetchURLs[ENV];\n\nconst fetchInstance = axios.create({\n  baseURL,\n});\n\nexport { fetchInstance };\n\n","import { AxiosResponse } from 'axios';\nimport { fetchInstance } from './config';\n\ntype PagesResponse = {\n  pages: Page[];\n  count: number;\n}\ntype Page = {\n  id: string;\n  name: string;\n  type: string;\n  published: boolean;\n  stagesCount: number;\n};\n\n\n\nexport async function fetchPages(): Promise<AxiosResponse<PagesResponse>> {\n  const res = await fetchInstance(`/pages`);\n  const data = res;\n  return data;\n}\n\n","import { Link } from 'react-router-dom';\nimport { usePages } from '../../services/hooks/usePages';\nimport styles from './Pages.module.scss';\n\nexport default function Pages() {\n  const query = usePages();\n\n  // While data is loading\n  if (query.isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  // If erre occured give a refresh option\n  if (query.error) {\n    return (\n      <div>\n        <p>Something went wrong</p>\n        <button onClick={() => query.refetch()}>Refetch</button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h2>Process Name</h2>\n      <ul className={styles.pages}>\n        {query.data &&\n          query.data.data.pages.map((page) => (\n            <li key={page.id}>\n              <div>\n                <Link to={`/pages/${page.id}`}>\n                  {page.name} <span>- {page.type}</span>\n                </Link>\n                <p>{page.published ? 'published' : 'not published'}</p>\n              </div>\n              <div>\n                <Link to={`/pages/${page.id}`}>Number of stages ({page.stagesCount})</Link>\n              </div>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n}\n","import { useQuery } from \"react-query\";\nimport { fetchPages } from \"../pages\";\n\nexport function usePages() {\n  const query = useQuery('pages', fetchPages);\n  return query;\n}","import { AxiosResponse } from 'axios';\nimport { fetchInstance } from './config';\n\ntype StagesResponse = {\n  stages: Stage[];\n  count: number;\n}\n\ntype Stage = {\n  id: string;\n  name: string;\n  type: string;\n  pageId: string;\n  narrative: string;\n  linksCount: number;\n  display: displayI;\n}\n\ntype displayI = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport async function fetchStages(pageId: string): Promise<AxiosResponse<StagesResponse>> {\n  const res = await fetchInstance(`/stages`, { params: { pageId } })\n  const data = res;\n  return data;\n}","import { useQuery } from \"react-query\";\nimport { fetchStages } from \"../stages\";\n\nexport function useStages(pageId: string) {\n  const query = useQuery(['stages', { pageId }], () => fetchStages(pageId));\n  return query;\n}","import { Link, useHistory, useParams } from 'react-router-dom';\nimport { useStages } from '../../services/hooks/useStages';\nimport styles from './Stages.module.scss';\n\ninterface ParamTypes {\n  pageId: string;\n}\n\nexport default function Stages() {\n  const { pageId } = useParams<ParamTypes>();\n  const query = useStages(pageId);\n  let history = useHistory();\n\n  // While data is loading\n  if (query.isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  // If erre occured give a refresh option\n  if (query.error) {\n    return (\n      <div>\n        <p>Something went wrong</p>\n        <button onClick={() => query.refetch()}>Refetch</button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h2>Stages</h2>\n      <button onClick={() => history.goBack()}>Back</button>\n      <ul className={styles.stages}>\n        {query.data &&\n          query.data.data.stages.map((stage) => (\n            <li key={stage.id}>\n              <div>\n                <Link to={`/pages/${stage.pageId}`}>{stage.name}</Link>\n              </div>\n              <div>\n                <Link to={`/pages/${stage.pageId}`}>Number of links ({stage.linksCount})</Link>\n              </div>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport styles from './App.module.scss';\nimport Pages from './components/pages/Pages';\nimport Stages from './components/stages/Stages';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <main className={styles.container}>\n        <Switch>\n          <Route path=\"/pages/:pageId\">\n            <Stages />\n          </Route>\n          <Route path=\"/\" exact>\n            <Pages />\n          </Route>\n        </Switch>\n      </main>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}